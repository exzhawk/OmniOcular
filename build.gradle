ext.mc_version = "1.7.10"
ext.mod_version = "1.0"
ext.env = System.getenv()

apply plugin: 'java'
compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = mc_version + "-" + mod_version
group = "me.exz.omniocular" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = "OmniOcular"

if (env.BUILD_NUMBER != null) {
    version += "build" + env.BUILD_NUMBER
}

configurations {
    shade
    compile.extendsFrom shade
}

minecraft {
    version = "1.7.10-10.13.4.1566-1.7.10"
    runDir = "eclipse"
    replaceIn "me/exz/omniocular/reference/Reference.java"
    replace "@VERSION@", project.version
}

dependencies {
    compile "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    shade group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.3.14.v20161028'
    shade group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.3.14.v20161028'
    shade group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.3.14.v20161028'
}

repositories {
    maven {
        name "ProfMobius"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'ChickenBones'
        url "http://chickenbones.net/maven/"
    }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

jar {
    manifest {
        attributes 'FMLAT': 'OmniOcular_at.cfg'
        attributes 'FMLCorePlugin': 'me.exz.omniocular.asm.Core'
        attributes 'FMLCorePluginContainsFMLMod': true

    }
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}